run:
  timeout: 3m
  skip-files:
    - ".*mock.go$"

linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 15
  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    block-size: 5
  funlen:
    lines: 100
    statements: 50
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - rangeValCopy
      - hugeParam
  lll:
    line-length: 140
  goimports:
    local-prefixes: github.com/rembosk8/query-builder-go
  gci:
    sections:
      - standard
      - default
      - "prefix(github.com/rembosk8/query-builder-go)"
  gomoddirectives:
    replace-allow-list: 
      - github.com/lamoda/gonkey
      - github.com/go-openapi/runtime
  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      # `camel` is used for `json` and `yaml` (can be overridden)
      # Default: {}
      rules:
        yaml: snake
        json: snake
  depguard:
    # Kind of list is passed in.
    # Allowed values: allowlist|denylist
    # Default: denylist
    list-type: denylist
    # Check the list against standard lib.
    # Default: false
    include-go-root: false
    # A list of packages for the list type specified.
    # Can accept both string prefixes and string glob patterns.
    # Default: []
    packages:
      - golang.org/x/net/context
    # A list of packages for the list type specified.
    # Specify an error message to output when a denied package is used.
    # Default: []
    packages-with-error-message:
      - golang.org/x/net/context: 'you probably need stdlib context instead'

linters:
  disable-all: true
  enable:
    ## enabled by default
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types
    ## disabled by default
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - containedctx # containedctx is a linter that detects struct contained context.Context field
    - contextcheck # check the function whether use a non-inherited context
    - cyclop # checks function and package cyclomatic complexity
    - decorder # check declaration order and count of types, constants, variables and functions
    - depguard # [replaced by gomodguard] Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # Tool for code clone detection
    - durationcheck # check for two durations multiplied together
    - errchkjson # [don't see profit + I'm against of omitting errors like in the first example https://github.com/breml/errchkjson] Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive # check exhaustiveness of enum switch statements
    #- exhaustruct # Checks if all structure fields are initialized
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # Forbids identifiers
    - forcetypeassert # [replaced by errcheck] finds forced type assertions
    - funlen # Tool for detection of long functions
    - gci # Gci controls golang package import order and makes it always deterministic.
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    -
      goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godot # Check if comments end in a period
    - godox # Tool for detection of FIX_ME, TO_DO and other comment keywords
    - goerr113 # [too strict] Golang linter to check the errors handling expressions
    - gofmt # [replaced by goimports] Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt # [replaced by goimports, gofumports is not available yet] Gofumpt checks whether code was gofumpt-ed.
    - goheader # Checks is file header matches to pattern
    - goimports # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - gomnd # An analyzer to detect magic numbers.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    # - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec # Inspects source code for security problems
    - grouper # An analyzer to analyze expression groups.
    - ifshort # Checks that your code uses short syntax for if-statements whenever possible
    - importas # Enforces consistent import aliases
#    - ireturn # Accept Interfaces, Return Concrete Types
    - lll # Reports long lines
    - maintidx # maintidx measures the maintainability index of each function.
    - makezero # Finds slice declarations with non-zero initial length
    - misspell # [useless] Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    - nlreturn # [too strict and mostly code is not more readable] nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    #- nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    # - paralleltest # [too many false positives] paralleltest detects missing usage of t.Parallel() method in your Go test
    - prealloc # [premature optimization, but can be used in some cases] Finds slice declarations that could potentially be preallocated
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - stylecheck # Stylecheck is a replacement for golint
    - tagliatelle # Checks the struct tags.
    - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    #- testpackage # linter that makes you use a separate _test package
    - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    #- tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    # todo Review linter using
    #- varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
    - wastedassign # wastedassign finds wasted assignment statements.
    - whitespace # Tool for detection of leading and trailing whitespace
    # todo Review linter using
    #- wrapcheck # Checks that errors returned from external packages are wrapped
    # todo Review linter using
    #- wsl # [too strict and mostly code is not more readable] Whitespace Linter - Forces you to use empty lines!

    ## deprecated
    #- exhaustivestruct # [deprecated, replaced by exhaustruct] Checks if all struct's fields are initialized
    #- golint # [deprecated, replaced by revive] Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    #- interfacer # [deprecated] Linter that suggests narrower interface types
    #- maligned # [deprecated, replaced by govet fieldalignment] Tool to detect Go structs that would take less memory if their fields were sorted
    #- scopelint # [deprecated, replaced by exportloopref] Scopelint checks for unpinned variables in go programs
    #- structcheck # Finds unused struct fields. Replaced by unused.
    #- varcheck # Finds unused global variables and constants. Replaced by unused.
    #- deadcode # Finds unused code. Replaced by unused.

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 200

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 20
  exclude-rules:
    - path: test
      linters:
        - goerr113
        - gomnd
        - gochecknoglobals
        - prealloc
        - gosec
        - nosprintfhostport
    - path: pkg/api/server
      linters:
        - govet
  exclude:
    - "var-naming: don't use an underscore in package name"
    - "ST1003: should not use underscores in package names"
